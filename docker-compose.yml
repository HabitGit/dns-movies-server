version: '3.8'

services:

  postgres:
    container_name: postgres-dns-movies
    image: postgres:15.2
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_USERS_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d
    ports:
      - ${POSTGRES_PORT_OUTSIDE}:${POSTGRES_PORT_INSIDE}

  rabbitmq:
    container_name: rabbitmq-dns-movies
    image: rabbitmq
    hostname: rabbitmq
    restart: always
    env_file:
      - ./.env
    ports:
      - ${RABBITMQ_PORT_OUTSIDE}:${RABBITMQ_PORT_INSIDE}

  auth:
    container_name: auth-dns-movies
    build: ./server/auth
    env_file:
      - ./.env
    depends_on:
      - postgres
      - rabbitmq
      - users
    volumes:
      - ./server/auth:/app
      - /app/node_modules

  users:
    container_name: users-dns-movies
    build: ./server/users
    env_file:
      - ./.env
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./server/users:/app
      - /app/node_modules

  persons:
    container_name: persons-dns-movies
    build: ./server/persons
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - ./server/persons:/app
      - /app/node_modules

  movies:
    container_name: movies-dns-movies
    build: ./server/movies
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - ./server/movies:/app
      - /app/node_modules

  api:
    container_name: api-dns-movies
    build: ./server/api
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - users
      - persons
      - movies
      - auth
    volumes:
      - ./server/api:/app
      - /app/node_modules
    ports:
      - ${API_GATEWAY_PORT}:3000
